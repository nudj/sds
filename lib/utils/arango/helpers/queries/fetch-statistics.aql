// Run in the staging environment.  Primary data query.
// Used to form together all statistics for a given sample.

// Fetch events related to the mailgunIds and format into readable form
LET events = (
  FOR log IN logs
    FILTER log.message != null && log.message.headers != null // In rare cases it seems that some instant mailgun failures have no 'message.headers'.

    // Fetch only events that relate to one of the mailgunIds
    FILTER POSITION(@mailgunIds, log.message.headers["message-id"])

    RETURN {
      id: CONCAT(log.message.headers["message-id"], "_", log.event), // Used to make events unique (by a combination of their type and messageId)
      mailgunId: log.message.headers["message-id"],
      reason: log.reason,
      level: log["log-level"],
      date: DATE_FORMAT(log.timestamp * 1000, "%dd/%mm/%yy"),
      timestamp: log.timestamp,
      severity: log.severity,
      email: log.recipient,
      type: log.event
    }
)

// Arrange sample group events into batches by date
LET batches = MERGE(
  // These are the dates that emails were sent
  LET batchDates = (
    FOR event IN events
      FILTER event.type == "accepted" // Denotes a mailgun batch triggered
      RETURN DISTINCT event.date
  )

  // For every batch date, fetch the events related to each date (i.e. successful mailgun requests made)
  FOR date IN batchDates
    // Fetch all IDs that were accepted on a related batch date
    LET batchIds = (
      FOR event IN events
        FILTER event.type == "accepted" && event.date == date
        RETURN DISTINCT event.mailgunId
    )

    // Use the mailgunIds to fetch all events for those IDs, thus fetching
    // all the events related to the batch
    RETURN {
      [date]: (
        FOR event IN events
          FILTER POSITION(batchIds, event.mailgunId)
          RETURN event
      )
    }
)

FOR batchDate IN ATTRIBUTES(batches)
  LET batchEvents = batches[batchDate]

  LET fullDate = FIRST(
    FOR event IN batchEvents
      FILTER event.type == "accepted" // Events where mailgun received inital requests to send (ie. start of batch)
      SORT event ASC // Order by earliest to latest
      LIMIT 1 // Fetch only the earliest (ie. start time of the batch)

      // Return a date formatted to have date, weekday and time
      RETURN DATE_FORMAT(event.timestamp*1000, "%dd/%mm/%yy - %wwww - %hh:%ii")
  )

  // A list of events that are unique by type and id. E.g., Only 1 "opened" event per email
  LET uniqueBatchEvents = FLATTEN(
      // Get array of unique Ids
      LET uniqueIds = UNIQUE(batchEvents[*].id)

      // For every unique Id, return only one match
      FOR eventId IN uniqueIds
          RETURN FIRST(
            FOR event IN batchEvents
              FILTER event.id == eventId
              RETURN event
          )
  )

  LET clicks = (
    FOR event IN batchEvents
      FILTER POSITION(@clickedMailgunIDs, event.mailgunId)
      RETURN event
  )

  LET opens = (
    FOR event IN batchEvents
      FILTER event.type == "opened"
      RETURN event
  )

  LET uniqueOpens = (
    FOR event IN uniqueBatchEvents
      FILTER event.type == "opened"
      RETURN event
  )

  LET delivered = (
    FOR event IN uniqueBatchEvents
      FILTER event.type == "delivered"
      RETURN event
  )

  LET sent = (
    FOR event IN batchEvents
      FILTER event.type == "accepted"
      RETURN event
  )

  // Calculate percentage then strip to max of 5 characters (2 decimal places)
  LET percentageOpened = LEFT(((COUNT(uniqueOpens) / COUNT(delivered)) * 100), 5)
  LET percentageClicked = LEFT(((COUNT(clicks) / COUNT(delivered)) * 100), 5)

  RETURN {
    "Sample": @sample,
    "Date": fullDate,
    "Sent": COUNT(sent),
    "Delivered": COUNT(delivered),
    "Undelivered": COUNT(sent) - COUNT(delivered),
    "Opens": COUNT(opens),
    "Unique opens": COUNT(uniqueOpens),
    "Clicks": COUNT(clicks),
    "Open rate": CONCAT(percentageOpened, "%"),
    "Click rate": CONCAT(percentageClicked, "%")
  }
